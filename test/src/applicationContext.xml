<?xml version="1.0" encoding="UTF-8"?>
<beans 
   xmlns="http://www.springframework.org/schema/beans"
   xmlns:context="http://www.springframework.org/schema/context"
   xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:p="http://www.springframework.org/schema/p"
   xmlns:aop="http://www.springframework.org/schema/aop"
   xmlns:tx="http://www.springframework.org/schema/tx"
   xsi:schemaLocation="http://www.springframework.org/schema/aop
   http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
   http://www.springframework.org/schema/tx
   http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
   http://www.springframework.org/schema/context
   http://www.springframework.org/schema/context/spring-context-3.0.xsd
   http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
   http://mybatis.org/schema/mybatis-spring
   http://mybatis.org/schema/mybatis-spring.xsd">
		<!-- <context:component-scan base-package="com.ysd.*"></context:component-scan> -->
		<!-- <aop:aspectj-autoproxy></aop:aspectj-autoproxy> -->
		
		<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close" scope="singleton">
			<property name="driverClassName" value="com.mysql.jdbc.Driver"/>
			<property name="url" value="jdbc:mysql://localhost:3306/student?characterEncoding=utf-8" />
			<property name="username" value="root" />
			<property name="password" value="admin" />
			<property name="initialSize" value="10"/>
			<property name="maxActive" value="50"/>
			<property name="maxIdle" value="10"/>
			<property name="minIdle" value="5"/>
			<property name="maxWait" value="10000"/>
		</bean>
		<!-- sqlSessionFactory : SqlSessionFactory 
			dataSource : DataSource
		-->
		<bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean" >
			<property name="dataSource" ref="dataSource"></property>
			<property name="configLocation" value="classpath:mybatis.xml"></property>
		</bean>
		<!--功能：根据接口生成代理功能类  -->
		<bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
			<property name="basePackage" value="com.ysd.dao"></property>
			<property name="sqlSessionFactoryBeanName" value="sessionFactory"></property>
		</bean>
		<!-- 配置事务管理 -->
		<bean id="txMgr" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
			<property name="dataSource" ref="dataSource"></property>
		</bean>
		<!-- 配置声明式事务 -->
		<!--  
		REQUIRED：支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。 
		SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行。 
		MANDATORY：支持当前事务，如果当前没有事务，就抛出异常。 
		REQUIRES_NEW：新建事务，如果当前存在事务，把当前事务挂起。 
		NOT_SUPPORTED：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。 
		NEVER：以非事务方式执行，如果当前存在事务，则抛出异常。 
		NESTED：支持当前事务，如果当前事务存在，则执行一个嵌套事务，如果当前没有事务，就新建一个事务。
		-->
		<tx:advice transaction-manager="txMgr" id="txadvice">
			<tx:attributes>
				<tx:method name="add*" propagation="REQUIRED"/>
				<tx:method name="delete*" propagation="REQUIRED"/>
				<tx:method name="update*" propagation="REQUIRED"/>
				<tx:method name="select*" propagation="REQUIRED" read-only="true"/>
			</tx:attributes>
		</tx:advice>
		<aop:config>
			<aop:pointcut expression="execution(* com.ysd.service..*.*(..))" id="p1"/>
			<aop:advisor advice-ref="txadvice" pointcut-ref="p1"/>
		</aop:config>
</beans>